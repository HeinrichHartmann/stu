.TH STU 1 "$DATE" "stu-$VERSION" "University of Koblenz-Landau"
.SH NAME
stu \- Build automation
.SH SYNOPSIS
.B stu 
[ -f
.I FILENAME
] [
.I TARGET ...
] [
.I OPTIONS ...
]
.SH DESCRIPTION
Stu is a tool for build automation.  Like Make, it is used to call other programs in
order to build files.  Stu has two features that set it apart from Make:
(1) dynamic dependencies:  The dependencies of a target can be
themselves computed by a command.  When '[FILENAME]' (a filename currounded by angle brackets) is used as a
dependency, Stu will build the file FILENAME and read dependencies from
it.  (2) Parameters:  Names of files (and phony targets) can contain
parameters written using dollar syntax.  For example, a rule with a target
filename 'list.$NAME' will be used to build any file matching the
pattern 'list.*', and the parameter $NAME can be used in names of
dependencies and in the build command.  Targets may contain any number
of parameters. 

Names of files to build are passed on the command
line.  Rules for building files are read from the file 'main.stu', or
from a file passed by the -f option. 

In general, Stu is very much like Make:  Instead of a 'Makefile', there
should be a file named 'main.stu', which is read automatically by
Stu. Also like Make, Stu will build the first target it finds, except if
given an explicit target to built.   
Stu is designed to follow the conventions of Make,
of the Bourne shell and of Unix / POSIX in general.  As an example,
the options -f, -j and -k have the same meaning in Stu as they do in
Make. 

.SH OPTIONS
.IP "-f FILENAME"
Read the given file instead of the default 'main.stu'.  If the name of a
directory is passed, the file 'main.stu' in the given directory is
read. 
.IP -h
Output a short help and exit.
.IP "-j K"
Run K commands in parallel.  K must be a positive integer.  The default
value is one, meaning that Stu does not start commands in parallel. 
This option works like the corresponding option in Make. 
.IP -k
Keep going; do not stop running when an error occurs.  Instead, try to build as much
as possible.  This option is equivalent to that of Make. 
.IP -s
Silent mode; do not output the commands that are executed.  This option
is compatible to the same option in Make. 
.IP -v
Verbose mode; runtime information is printed on standard output
for each target when it is run.
.IP -V 
Output the version number of Stu and exit.

.SH EXAMPLES
A simple rule looks as follows:

    results.txt:  data.txt compute {
        ./compute <data.txt >results.txt 
    }

The colon may be omitted when there are no dependencies:

    A { echo la la la >A }

Here is an example of a rule containing three parameters.  Stu will use
pattern matching to match the target pattern to a given filename: 

    plot.$DATASET.$METHOD.$MEASURE.eps:  
        data-$DATASET.txt analyse-$METHOD 
    {
        ./analyse-$METHOD \\
            -m $MEASURE \\
            -f data-$DATASET.txt \\
            -o plot.$DATASET.$METHOD.$MEASURE.eps
    }

Here is an example of a dynamic dependency.  The target 'compute' (a C
program) must be rebuild whenever its source code files are modified.
Since the set of source code files is large and may be changed by
changing the source code itself, we use the file 'compute.c.dep' to
contain the list of dependencies.  The file 'compute.c.dep' will then be
built by Stu like any file, and its content parsed for the actual
dependencies:  

    compute:  [compute.c.dep] {
        gcc -c compute.c -o compute 
    }
    $NAME.c.dep:  $NAME.c compute-dep {
        ./compute-dep-c "$NAME.c" >"$NAME.c.dep"
    }

Parameters can also use the syntax ${...}.

Syntax can be on multiple lines; whitespace is not significant.  No
backslashes are needed at line ends:

    output.txt: 
        a.data b.data c.data d.data e.data f.data g.data h.data i.data
        j.data k.data l.data m.data
    {
        do-stuff  >output.txt; 
    }

A rule may be entirely given on a single line: 

    system-info: { uname -a >system-info }

The following rule uses single quotes to declare filenames that include
parentheses and quotes:  

    '((':  'aaa\\'\\"bbb' {
        ./bla -f 
    }

Multiple parametrized rules may match a target.  In that case Stu uses
the one that is the least parametrized, as defined by the subset
relation on the set of characters that are in parameters. 
When building 'X.txt' in this example, only the second rule is called:

    $NAME.txt: {  echo "$NAME" is the best >"$NAME.txt" }
    X.txt:  { echo X sucks >X.txt }

All commands are echoed by Stu.  Thus, you can output debugging
information (or any type of information) using shell comments.  There
is no need for the @echo construct of Make. 

    A:  {
        # This may take a while...
        compute-stuff >A
    }

Existence-only dependencies:  In the following example, the
directory 'data' is a existence-only dependency, i.e. 'data' is only
built when it does not exist, but it is never re-built.  An
existence-only dependency is indicated by the '!' prefix.  This is
useful for directories, whose timestamps change when files are
created/removed in them.  

    data/file:  !data {
        echo Hello >data/file	    
    }
    data: { mkdir data }

Optional dependencies can be declared with the '!' prefix.  An optional
dependency will never be built if it does not already exist.  If it
already exists, then its own rule is used (and its date checked) to
decide whether it should be rebuilt.  

    target:  ?input {
        if [ -r input ] ; then
            cp input target
        else
            echo Hello >target
        fi
    }

Variable dependency:  the content of variables can come from files.  
In the following example, the C flags are stored in the file 'CFLAGS',
and used in the compilation command using the $[CFLAGS] dependency.  

    compute:  compute.c $[CFLAGS]
    {
        gcc $CFLAGS compute -o compute.c
    }
    CFLAGS: { echo -Wall -Werror >CFLAGS }

Phony targets are marked with '@'.  They are used for targets such
as '@clean' that do an action without building a file, and for lists of
files that depend on other targets, but don't have a command associated
with them.  They are also used instead of variables that would otherwise
contain a list of filenames.  

Here is a phony target that cleans up the directory:

    @clean:  { rm -rf *.o *~ }

Here a phony target is used as a shortcut to a longer name: 

    @build.$NAME:   dat/build.$NAME.txt; 

Here a phony target is used as a list of files.  Multiple targets can depend on it, to effectively depend on the individual files:

    @headers:  a.h b.h c.h;

    x:  x.c @headers {  
        cc x.c -o x
    }

    y:  y.c @headers {  
        cc y.c -o y
    }

File inclusion is done using the '%include' statement. 
This can be put at any place in the input file, and will just temporarily continue
tokenization in another file.  The filename does not have to be
quoted, except if it contains special characters, just like any other
filename in Stu.  If a directory is given after include (with or without
an ending slash), the file 'main.stu' within that directory is read. 

    %include a.stu
    %include "b.stu"
    %include 'c.stu'
    %include data/

To declare which version of Stu a script is written for, use
the '%version' statement:

    %version 2.3
    %version 2.3.4

Both variants will allow the script to be executed only with a version
of Stu of the correct major version number (2 in this example), and
whose minor version (and patch level) have at least the given values. 

.SH SYNTAX
Like a makefile, a Stu file consists of rules.  In Stu, the order of
rules is not important, except for the fact that the first rule is
used by default if no rule is given explicitly.  Comments are written
with '#' like in Make or in the Bourne shell.  

The basic syntax is similar to that of make, but does not rely on
mandatory whitespace.  Instead of tabs, the commands are enclosed in
curly braces.  

Stu syntax supports three types of objects:  files, phonies and
variables.  File are any file in the file system, and are always
referenced by their filename.  Phonies have names beginning with the '@'
symbol and do not correspond to files, but can have dependencies and
commands.  

A rule for a file in Stu has the following syntax:

    [>] TARGET [ : DEPENDENCY ... ] { COMMAND }

The target is a filename.  DEPENDENCY ... are optional depencies.
COMMAND is a command which is passed to the shell for building. 
Stu will always execute
the whole command block using a single call to the shell.  This is
different than Make, which calls each line individually.  This means
that you can for instance define a variable on one line and use it on
the next.  It also means that the shell's rule will be used to
determine whether the whole command block succeeded:  Only the exit
code of the last issued command is used.  This means that you should
chain commands with '&&', or write them in a way that subsequent
commands cannot succeed when previous one failed. 

When the command of a file is replaced by a semicolon, this means that the file is
always built together with its dependencies:

    TARGET [ : DEPENDENCY ... ] ;

In this example, the file TARGET is assumed to be up to date whenever
all dependencies are up to date.  This can be used when two files are
built by a single command.  As a special case, writing the name of a
file followed by semicolon tells Stu that the file must always exist,
and is always up to date;  Stu will then report an error if the file
does not exist:

    TARGET ;

For a phony, the same syntax is used as for a file: 

    @TARGET [ : DEPENDENCY ... ] { COMMAND }
    @TARGET [ : DEPENDENCY ... ] ;

If a phony target includes a command, Stu will have no way of
remembering that the command was executed, and the command will be
executed again on the next invocation of Stu, even if the previous
invocation was successful.  Therefore, commands for phonies will
typically output build progress information, or perform actions that do
not fit well the build system paradigm, such as removing or deploying
built files. 

The operator '>' can be used in front of the target name to indicate
that the output of the command should be redirected into the target
file.  As an example, the following code creates the file 'HEADERS'
containing the output of the given 'echo' command:

    >HEADERS { echo *.h }

A dependency can be one of the following:

    NAME    A file dependency

The target depends on the file with the name NAME.  Stu will make sure
that the file NAME is up to date before the target itself can be up to
date. 

    @NAME   A phony dependency

A phony target.

    !NAME   An existence-only dependency

Stu will only check whether the dependency exists, but not its
modification time.  This is mostly useful for directories, as the
modification time of directories is updated whenever files are added or
removed in the directory. 

    ?NAME   An optional dependency

Optional dependencies are never built if they don't exist.  If they
exist, they are treated like normal dependencies and their date is taken
into account for determining whether the target has to be rebuilt. 

    [NAME]  A dynamic dependency

Stu will ensure the file named NAME exists, and then parse it as
containing further dependencies of the target.  The fact that NAME needs
to be rebuild does not imply that the target has to be rebuilt.

    $[NAME] A variable dependency

The file NAME is ensured to be up to date, and the content of the file
NAME is used as the value of the variable $NAME when the target's
command is executed.  

    <NAME An input dependency

The dependency is a file which will be used as standard input for the
command.  

    ( ... )

Groups of dependencies can be enclosed on parentheses.  The
flags '!' and '?' can be applied to a group of dependencies given in
parentheses:

    ! ( ... )
    ? ( ... )

The flags '!' and '?' can be applied to dynamic dependencies:

    ! [ ... ]
    ? [ ... ]

in which case all resulting dynamic dependencies will be flagged as
optional of existence-only. 

.SH PARAMETERS

Any file or phony target may include parameters.  Parameters are
noted using the '$' character and are given a name.  Stu will match the
pattern to any file or phony it needs to build.  Parameters can appear in
dependencies and in commands any number of times (included not appearing in them).  
In a target name, a parameter can only appear once.  

Parameters within a single target name must be separated by at least one
character, as otherwise Stu 
would not be able to determine how to split up a chain of characters
into two parameters.  Names of parameters cannot be empty.  

A file or phony name may match more than one parametrized rule.  If that
is the case, then there must be one matching rule that dominates all
other matching rules.  A rule A is defined to dominate another rule B if for
every character in the target filename there is inside a parameter in 
rule A, it is also inside a parameter in rule B, and at least one
character is in a parameter is rule B but not in rule B.  It is an error
when there is no single matching rule that dominates all other matching
rules. 

In the following example, the first rule dominates the other rules for
the file named 'a.b.c':  

    a.$X.c: ... { ... }
    a.$X:   ... { ... }
    $X.c:   ... { ... }

In the following example, no rule dominates the others for the
filename 'a.b.c', so Stu will report an error:  

    $X.b.c: ... { ... }
    a.$X.c: ... { ... }
    a.b.$X: ... { ... }

.SH TOKENIZATION

Unquoted filenames in Stu may contain the following ASCII characters:

    [a-z] [A-Z] [0-9] _ ^ ` + - . ~ / 

and all non-ASCII characters.  Filenames containing
other characters must be quoted by either single or double quotes.
Inside single and double quotes, backslashes, single quotes and double
quotes must be escaped by a backslash.  Quoted or unquoted names which
are not separated by whitespace are interpreted as a single name. 

The following characters have special meaning in Stu and cannot be used in
unquoted filenames:

    #     Comment (until the end of the line)
    %     Preprocessor character
    " '   Quote 
    $     Parameter
    @     Phony target
    :     Separator for rule definition
    ;     For rules without body, end of variable declaration 
    !     Existence-only dependency
    ?     Optional dependency
    { }   Command
    ( )   List
    [ ]   Dynamic dependency
    >     Output redirection
    <     Input redirection

Comments introduced by '#' go until the end of the line.  Commands
starting with '{' go until the matching '}', taking into account shell
syntax, i.e., the command itself may contain more braces.  All other
characters are individual tokens and may or may not be separated from
other tokens by whitespace. 

A Stu file may include another Stu file using the following syntax:

    %include FILENAME

Note that '%' is a regular token and therefore it need not be the first
character on a line, and there may be space between '%' and 'include'.
Also, the filename need not be quoted if it consists only of allowed
characters as described previously. 

The following characters are reserved for future extension:

    * = \\ | & , 

.SH "SEMANTICS"

Cycles in the dependency graph are not allowed. As an example, the
following results in an error:

    A:  B { ... }
    B:  A { ... }    

Cycles are considered at the rule level, i.e., cycles such as the
following are also flagged as an error, even though there is no cycle on
the filename level.  In the following example, it is not possible to
build the file 'a.gz.gz' from the file 'a', even though it would not
result in a cycle, but since both files 'a.gz' and 'a.gz.gz' use the
same parametrized rule, this is not allowed:

    $NAME.gz:  $NAME { gzip $NAME }

Cycles are also possible in dynamic dependencies, where they are allowed
and ignored.  For instance, the following examples will correctly build
the file 'A', after having built 'B' and 'C':

    A:  [B] { echo CORRECT >A }
    B:  { echo [C] >B }
    C:  { echo [B] >C }

Symlinks are treated transparently by Stu.  In other words, Stu will
always consider the timestamp of the linked-to file.  A symlink to a
non-existing file will be treated as a non-existing file. 

.SH "EXIT STATUS"
.IP 0
Everything was built successfully or was up to date already.
.IP 1
Build error.  Example:  a child process produced an error, or a
dependency was not found and no rule was given for it.
.IP 2
Logical error.  Examples:  syntax error in input file, invalid
invocation, cycle in the dependency graph.  
.IP 3
Both build and logical errors were encountered (mostly when using the -k
option). 
.IP 4
System error that made Stu abort execution.  Examples: no permission to
access file, input file does not exist. 

.SH "MORE EXAMPLES"

This section contains more advanced examples of Stu usage.

The following declaration tells Stu that the file 'config.h' must exist,
and will allow Stu to give more meaningful error messages if the file is
not found.  

    config.h; 

Input and output redirection can be used to write commands that invoke
a filter such as sed, awk or tr.  The following example will build
the 'A' containing the string 'HELLO':

    >A: <B { tr a-z A-Z }
    >B { echo hello }

Variable dependencies may be included indirectly through phony targets
without commands and dynamic dependencies.  In the
following example, the variable $V will be passed through to the
commands for the targets A and B:

    V: { echo Hello >V }
    @x: $[V];         
    y: { echo '$[V]' >y }
    A: @x { echo $V >A }
    B: [y] { echo $V >B }

.SH AUTHOR
Jérôme Kunegis <kunegis@uni-koblenz.de>
.SH "SEE ALSO"
.BR make (1)
